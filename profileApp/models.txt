from django.db import models

# Create your models here#
from django.urls import reverse


def image_folder_students(instance, filename):
    return 'student_{0}/{1}'.format(instance.s_id, filename)

def image_folder_teachers(instance, filename):
    return 'teacher_{0}/{1}'.format(instance.t_id, filename)

class Books(models.Model):
    book_id = models.AutoField(primary_key=True)
    book_name = models.CharField('Book name', max_length=50, blank=False, null=False)
    book_author = models.CharField('Book author', max_length=30, blank= False, null=False)
    date_published = models.DateField()

    def __str__(self):
        return self.book_name

    class Meta:
        db_table='books'
        verbose_name = "Book"
        verbose_name_plural = "Books"

class Courses(models.Model):
    course_id = models.AutoField(primary_key=True)
    dean = models.CharField(max_length=30, blank=False, null=False)
    course_name = models.CharField('Course name', max_length=150, blank=False, null=False)

    def __str__(self):
        return self.course_name

    class Meta:
        db_table='courses'
        verbose_name = "Course"
        verbose_name_plural = "Courses"

class Groups(models.Model):
    g_id = models.AutoField(primary_key=True)
    course_level = models.PositiveSmallIntegerField('Course level',blank=False, null=False)
    g_name = models.CharField('Group name',max_length=30, blank=False, null=False)
    date_start = models.DateField(null=False)
    date_end = models.DateField(null=True)
    course_id = models.ManyToManyField(Courses)

    def __str__(self):
        return self.g_name

    class Meta:
        db_table='groups'
        verbose_name = "Group"
        verbose_name_plural = "Groups"


class Roles(models.Model):
    role_id = models.AutoField(primary_key=True)
    role_name = models.CharField('Role name', max_length=20, blank=False, null=False)

    def __str__(self):
        return self.role_name

    class Meta:
        db_table='roles'
        verbose_name = "Role"
        verbose_name_plural = "Roles"

class Subjects(models.Model):
    sub_id = models.AutoField(primary_key=True)
    sub_name = models.CharField('Subject namem', max_length=20,blank=False, null=False)
    sub_book_id = models.ManyToManyField(Books)
    room_number = models.PositiveSmallIntegerField('Room number')

    def __str__(self):
        return self.sub_name
    class Meta:
        db_table = 'subjects'
        verbose_name = "Subject"
        verbose_name_plural = "Subjects"


class Student(models.Model):
    #user = models.OneToOneField(User, on_delete=models.CASCADE)
    s_id = models.AutoField(primary_key=True)
    s_name = models.CharField('Name', max_length=30, blank=False, null=False, help_text="Enter student's name")
    s_surname = models.CharField('Surname', max_length=30, blank=False, null=False, help_text="Enter student's surname")
    s_thirdname = models.CharField('Thirdname', max_length=30, blank=True, null=True, help_text="Enter student's thirdname")
    group_id = models.ForeignKey(Groups, on_delete=models.CASCADE)
    s_date_of_birth = models.DateField('Date of birth')
    phone_number = models.CharField("Phone number", max_length=50, blank=True, null=True, default="+998")
    s_photo = models.ImageField('Upload photo', blank=True, null=True, upload_to='students/')
    s_reg_date = models.DateField('Registration date', blank=False, help_text="Date of registration")
    s_region = models.CharField('Region of a Country', max_length=30, help_text="Enter user's region (Fergana, Tashkent viloyat, Samarkand)")
    s_city = models.CharField('City', max_length=30, help_text="Enter user's city (Fergana, Tashkent, Samarkand)")
    s_passport_series = models.CharField('Passport series', max_length=10, blank=False, null=False, help_text="two letters")
    s_passport_number = models.CharField('Passport number', max_length=10, blank=False, null=False, help_text="passport's number")
    s_home_address = models.CharField('Home address',max_length=70, blank=False, null=False,help_text="home address")
    s_login = models.CharField('Login',max_length=50, blank=False, null=False, help_text="Enter login")
    s_password = models.CharField('Password', max_length=50, blank=False, null=False)
    s_email = models.EmailField('Email', max_length=50)
    s_rating = models.PositiveSmallIntegerField('Rating')
    role_id = models.ForeignKey(Roles, on_delete=models.CASCADE)
    url_path = str(s_name) + "_" + str(s_surname)
    url = models.SlugField(max_length=50, unique=True, default=url_path)

    def get_absolute_url(self):
        return reverse('student_detail', kwargs={"slug": self.url})

    def __str__(self):
        return self.s_name


    class Meta:
        verbose_name = "Student"
        verbose_name_plural = "Students"


class Teachers(models.Model):
    t_id = models.AutoField(primary_key=True)
    t_name = models.CharField('Name',max_length=30, blank=False, null=False, help_text="Enter student's name")
    t_surname = models.CharField('Surname',max_length=30, blank=False, null=False, help_text="Enter student's surname")
    t_thirdname = models.CharField('Thirdname', max_length=30, blank=True, null=True, help_text="Enter student's thirdname")
    t_date_of_birth = models.DateField('Date of birth')
    phone_number = models.CharField("Phone number)", max_length=50, blank=True, null=True, default="+998")
    t_photo = models.ImageField('Upload photo', blank=True, null=True, upload_to='teachers/')
    t_reg_date = models.DateField('Registration date', blank=False, help_text="Date of registration")
    t_region = models.CharField('Region of a country', max_length=30, help_text="Enter user's region (Fergana, Tashkent viloyat, Samarkand)")
    t_city = models.CharField('City', max_length=30, help_text="Enter user's city (Fergana, Tashkent, Samarkand)")
    t_passport_series = models.CharField('Passport series', max_length=10, blank=False, null=False, help_text="two letters")
    t_passport_number = models.CharField('Passport number', max_length=10, blank=False, null=False, help_text="passport's number")
    t_home_address = models.CharField('Home address', max_length=70, blank=False, null=False, help_text="home address")
    t_login = models.CharField('Login', max_length=50, blank=False, null=False, help_text="Enter login")
    t_password = models.CharField('Password', max_length=50, blank=False, null=False)
    t_email = models.EmailField('Email', max_length=50)
    t_rating = models.PositiveSmallIntegerField('Rating')
    role_id = models.ForeignKey(Roles, on_delete=models.CASCADE)
    subject = models.ManyToManyField(Subjects)
    url_path = str(t_name) + "_" + str(t_surname)
    url = models.SlugField(max_length=50, unique=True, default=url_path)

    def get_absolute_url(self):
        return reverse('teacher_detail', kwargs={"slug": self.url})

    def __str__(self):
        return self.t_name

    class Meta:
        db_table='teachers'
        verbose_name = "Teacher"
        verbose_name_plural = "Teachers"









































